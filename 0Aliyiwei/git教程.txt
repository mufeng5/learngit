1.安装  从https://git-for-windows.github.io下载,默认安装.
  开始菜单里找到“Git”->“Git Bash”,
  $ git config --global user.name "Your Name"
  $ git config --global user.email "email@example.com"
  输入你的名字和邮箱.
2.创建版本库  
  1)创建一个空目录  
  $ mkdir learngit
  $ cd learngit
  $ pwd       显示当前目录
  /Users/michael/learngit
  2)把这个目录变成Git可管理的仓库
  $ git init
  Initialized empty Git repository in /Users/michael/learngit/.git/
  
  提交文件:
  创建一个文件,把文件放到learngit目录下
  1)把文件添加到仓库：
  $ git add readme.txt
  2)把文件提交到仓库：
  $ git commit -m "wrote a readme file"
  [master (root-commit) cb926e7] wrote a readme file
  1 file changed, 2 insertions(+)
  create mode 100644 readme.txt
3.查看管理
  git status 掌握仓库当前的状态
  看文件是否被修改过,如有修改,
  git diff  查看被修改内容
  
  1.git log 命令显示从最近到最远的提交日志
    或者 git log --pretty=oneline
  2.退回上一个版本
    git reset --hard HEAD^
cat +文件名 查看文件内容
  3. git reflog 记录每次命令,查看版本id,方便退回
  
  工作区和暂存区
  暂存区就像购物车，没到付款的时候你都不确定购物车里的东西全部都是要的。。。每拿一件商品就付一次款。。。那才麻烦大了
  
  git diff HEAD -- readme.txt  可以查看工作区和版本库里面最新版本的区别
  
  修改
  场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- filename。
  场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，
         第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
  场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，git reset --hard 版本号，不过前提是没有推送到远程库。
  
  删除
  1)工作区  rm filename  
  2)版本库  git rm filename 
  ps:万一工作区误删,可以在版本库找回,git chexkout -- filename
  
4. 远程库
  github 
  用户名:mufeng5    密码:liyiwei123456789  
  要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；
  关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
  此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；
  
  克隆库
  要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。 
  git clone git@github.com:mufeng5/gitskills.git
  
5.分支
  查看分支：git branch
  创建分支：git branch <name>
  切换分支：git checkout <name>
  创建+切换分支：git checkout -b <name>
  合并某分支到当前分支：git merge <name>
  删除分支：git branch -d <name>
  
  解决冲突:
  当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
  用git log --graph命令可以看到分支合并图。 git log --graph --pretty=oneline --abbrev-commit
  
  分支管理策略
  合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，
  而fast forward合并就看不出来曾经做过合并。
  git merge --no-ff -m "merge with no-ff" dev
  合并后，我们用git log看看分支历史：
  $ git log --graph --pretty=oneline --abbrev-commit
  
  bug分支
  Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：
  $ git stash
  用git stash list命令看看：
  $ git stash list
  恢复
  一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；
  另一种方式是用git stash pop，恢复的同时把stash内容也删了
  
  feature分支
  开发一个新feature，最好新建一个分支；
  如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。
   git branch -D feature-vulcan
  
  多人协作
  查看远程库信息，使用git remote -v；
  本地新建的分支如果不推送到远程，对其他人就是不可见的；
  从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
  在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，
  本地和远程分支的名称最好一致；
  建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
  从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。
  
6.  